//Proportional constant
//100 was best for me; alter for your setup
float Kp = 100.0;

//setPoint is 0 degrees, 512 is the analog bit equivalent
int setPoint = 511;
  
  
//Time between each measurement and correction (ms)
int intervalTime = 1;

#define pinWheelR1 8
#define pinWheelR2 3
#define pinWheelL1 10
#define pinWheelL2 9
#define pinWheelSpeedR 5
#define pinWheelSpeedL 6
#define pinGyroAngle 0

//To move forward:
//  R1: LOW R2: HIGH
//  L1: HIGH L2: LOW

//To move back:
//  R1: HIGH R2: LOW
//  L1: LOW L2: HIGH



void setup() {
  //pin setup
  pinMode(pinWheelR1, OUTPUT);
  pinMode(pinWheelR2, OUTPUT);
  pinMode(pinWheelL1, OUTPUT);
  pinMode(pinWheelL2, OUTPUT);
  pinMode(pinWheelSpeedR, OUTPUT);
  pinMode(pinWheelSpeedL, OUTPUT);
  
  pinMode(pinGyroAngle, INPUT);


  //Begin serial interface
  Serial.begin(9600);
}

void loop() {
  //get angle from pinGyroAngle
  int analogAngle = analogRead(pinGyroAngle);
  //0 to 510 bits is a forward tilt
  //511 is vertical
  //512 to 1023 bits is a backward tilt
  
  //getting error from feedback 
  int error = setPoint - analogAngle;
  //positive error = backwards tilt
  //negative error = forwards tilt
  
  //applying Kp
  //NOTE: although Ki is a float and the calculations
  //assign to integer variables, by C's design when a calculation is 
  //done with both integers and floats, the integers are converted to
  //float by default. Furthermore, also by default, when a float is 
  //assigned to an integer variable it gets rounded to the nearest
  //integer.
  
  //current error * Kp
  int pCorrection = error * Kp;
  
  
  
  

  //correction is positive/negative to deduce the direction
  //of motor rotation.
  //We don't need that as we use angle to dictate the direction.
  //Therefore correction is only needed for its magnitude
  //so we will get its absolute value.
  pCorrection = abs(pCorrection);
  
  //Now scale pCorrection down to 0 to 255 bits dividing by
  //maximum possible pCorrection and multiplying
  //by 255 because pinWheelSpeed can only take 0 to 255 bits
  int wheelSpeed = pCorrection/(512 * Kp) * 255;
  
  
  
  
  
  //deadband zones
  //Essentially creating a threshold such that if the setPoint
  //is close enough to the setPoint, don't turn wheels.
  //This prevents the wheels from switching directions 
  //continuously when the analogAngle hovers around the setPoint.
  int lowerDeadband = setPoint - 40;
  int upperDeadband = setPoint + 40;
  
  
  
  
  
  //if it is tilting forward(negative correction), go forward
  if (analogAngle < lowerDeadband){
    Serial.println("moving forward");
    digitalWrite(pinWheelR1, LOW);
    digitalWrite(pinWheelR2, HIGH);
    digitalWrite(pinWheelL1, HIGH);
    digitalWrite(pinWheelL2, LOW);

    //setMotorSpeed(pCorrection)
    analogWrite(pinWheelSpeedR, wheelSpeed);
    analogWrite(pinWheelSpeedL, wheelSpeed);
  }
  //if it is tilting backward(positive correction), go back
  if (analogAngle > upperDeadband){
    Serial.println("moving backward");
    digitalWrite(pinWheelR1, HIGH);
    digitalWrite(pinWheelR2, LOW);
    digitalWrite(pinWheelL1, LOW);
    digitalWrite(pinWheelL2, HIGH);

    //setMotorSpeed(pCorrection)
    analogWrite(pinWheelSpeedR, wheelSpeed);
    analogWrite(pinWheelSpeedL, wheelSpeed);
  }
  //if it's balanced, leave it
  if (analogAngle >= lowerDeadband && analogAngle <= upperDeadband){
    Serial.println("stable");
    
    //setMotorSpeed(0)
    analogWrite(pinWheelSpeedR, 0);
    analogWrite(pinWheelSpeedL, 0);
  }

  delay(intervalTime);
}
